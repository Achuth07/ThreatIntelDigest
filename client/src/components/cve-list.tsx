import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { apiRequest } from '@/lib/queryClient';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Shield, Calendar, ExternalLink, AlertTriangle, Info } from 'lucide-react';
import { format } from 'date-fns';

interface CVE {
  id: string;
  description: string;
  publishedDate: string;
  lastModifiedDate: string;
  vulnStatus: string;
  cvssV3Score: number | null;
  cvssV3Severity: string | null;
  cvssV2Score: number | null;
  cvssV2Severity: string | null;
  weaknesses: string[];
  references: { url: string; source: string; tags?: string[] }[];
  createdAt: string;
}

interface VulnerabilitiesResponse {
  vulnerabilities: CVE[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  };
  meta: {
    count: number;
    lastUpdated: string;
  };
}

interface CVEListProps {
  onClose?: () => void;
}

const getSeverityColor = (severity: string | null) => {
  switch (severity?.toUpperCase()) {
    case 'CRITICAL':
      return 'bg-red-500 text-white';
    case 'HIGH':
      return 'bg-orange-500 text-white';
    case 'MEDIUM':
      return 'bg-yellow-500 text-black';
    case 'LOW':
      return 'bg-green-500 text-white';
    default:
      return 'bg-gray-500 text-white';
  }
};

const getSeverityIcon = (severity: string | null) => {
  switch (severity?.toUpperCase()) {
    case 'CRITICAL':
    case 'HIGH':
      return <AlertTriangle className="w-4 h-4" />;
    default:
      return <Info className="w-4 h-4" />;
  }
};

export function CVEList({ onClose }: CVEListProps) {
  const [selectedSeverity, setSelectedSeverity] = useState<string>('all');
  const [currentPage, setCurrentPage] = useState(1);

  const { data, isLoading, error, refetch } = useQuery<VulnerabilitiesResponse>({
    queryKey: ['vulnerabilities', selectedSeverity, currentPage],
    queryFn: async () => {
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '20',
      });
      
      if (selectedSeverity !== 'all') {
        params.append('severity', selectedSeverity);
      }
      
      const response = await apiRequest('GET', `/api/vulnerabilities?${params}`);
      return response.json();
    },
  });

  const vulnerabilities = data?.vulnerabilities || [];
  const pagination = data?.pagination;

  const handleSeverityChange = (severity: string) => {
    setSelectedSeverity(severity);
    setCurrentPage(1);
  };

  if (isLoading) {
    return (
      <div className="p-6 bg-slate-900 text-slate-100 h-full overflow-y-auto">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold flex items-center">
            <Shield className="w-6 h-6 text-cyber-cyan mr-2" />
            Latest Vulnerabilities
          </h2>
          {onClose && (
            <Button variant="ghost" onClick={onClose} className="text-slate-400 hover:text-slate-100">
              ×
            </Button>
          )}
        </div>
        
        <div className="space-y-4">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="bg-slate-800 rounded-lg p-4 animate-pulse">
              <div className="h-4 bg-slate-700 rounded w-1/3 mb-2"></div>
              <div className="h-3 bg-slate-700 rounded w-full mb-2"></div>
              <div className="h-3 bg-slate-700 rounded w-2/3"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6 bg-slate-900 text-slate-100 h-full">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold flex items-center">
            <Shield className="w-6 h-6 text-cyber-cyan mr-2" />
            Latest Vulnerabilities
          </h2>
          {onClose && (
            <Button variant="ghost" onClick={onClose} className="text-slate-400 hover:text-slate-100">
              ×
            </Button>
          )}
        </div>
        
        <div className="text-center py-8">
          <p className="text-red-400 mb-4">Failed to load vulnerabilities</p>
          <Button onClick={() => refetch()} variant="outline">
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-slate-900 text-slate-100 h-full overflow-y-auto">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold flex items-center">
          <Shield className="w-6 h-6 text-cyber-cyan mr-2" />
          Latest Vulnerabilities
        </h2>
        {onClose && (
          <Button variant="ghost" onClick={onClose} className="text-slate-400 hover:text-slate-100">
            ×
          </Button>
        )}
      </div>

      {/* Filters */}
      <div className="mb-6">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <label className="block text-sm text-slate-400 mb-2">Filter by Severity</label>
            <Select value={selectedSeverity} onValueChange={handleSeverityChange}>
              <SelectTrigger className="bg-slate-800 border-slate-700 text-slate-100">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severities</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* CVE List */}
      {vulnerabilities.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-slate-400">No vulnerabilities found</p>
          <p className="text-sm text-slate-500 mt-2">Try adjusting your filters or check back later</p>
        </div>
      ) : (
        <div className="space-y-4">
          {vulnerabilities.map((cve: CVE) => {
            const primarySeverity = cve.cvssV3Severity || cve.cvssV2Severity;
            const primaryScore = cve.cvssV3Score || cve.cvssV2Score;
            
            return (
              <Card key={cve.id} className="bg-slate-800 border-slate-700 hover:border-slate-600 transition-colors">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <CardTitle className="text-lg text-slate-100 mb-2">
                        {cve.id}
                      </CardTitle>
                      <div className="flex flex-wrap gap-2 mb-2">
                        {primarySeverity && (
                          <Badge className={`${getSeverityColor(primarySeverity)} flex items-center gap-1`}>
                            {getSeverityIcon(primarySeverity)}
                            {primarySeverity}
                            {primaryScore && (
                              <span className="ml-1">({primaryScore})</span>
                            )}
                          </Badge>
                        )}
                        <Badge variant="outline" className="text-slate-300 border-slate-600">
                          {cve.vulnStatus}
                        </Badge>
                      </div>
                    </div>
                  </div>
                  <CardDescription className="text-slate-300 text-sm leading-relaxed">
                    {cve.description.length > 300 
                      ? `${cve.description.substring(0, 300)}...` 
                      : cve.description
                    }
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="pt-0">
                  <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                    <div className="flex items-center text-sm text-slate-400">
                      <Calendar className="w-4 h-4 mr-2" />
                      Published: {format(new Date(cve.publishedDate), 'MMM dd, yyyy')}
                    </div>
                    
                    {cve.references.length > 0 && (
                      <div className="flex gap-2">
                        {cve.references.slice(0, 2).map((ref, index) => (
                          <Button
                            key={index}
                            variant="outline"
                            size="sm"
                            className="text-xs border-slate-600 text-slate-300 hover:text-slate-100"
                            onClick={() => window.open(ref.url, '_blank')}
                          >
                            <ExternalLink className="w-3 h-3 mr-1" />
                            {ref.source}
                          </Button>
                        ))}
                        {cve.references.length > 2 && (
                          <span className="text-xs text-slate-500 self-center">
                            +{cve.references.length - 2} more
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                  
                  {cve.weaknesses.length > 0 && (
                    <div className="mt-3 pt-3 border-t border-slate-700">
                      <p className="text-sm text-slate-400 mb-1">Weaknesses:</p>
                      <div className="flex flex-wrap gap-1">
                        {cve.weaknesses.slice(0, 3).map((weakness, index) => (
                          <Badge key={index} variant="secondary" className="text-xs bg-slate-700 text-slate-300">
                            {weakness}
                          </Badge>
                        ))}
                        {cve.weaknesses.length > 3 && (
                          <Badge variant="secondary" className="text-xs bg-slate-700 text-slate-400">
                            +{cve.weaknesses.length - 3} more
                          </Badge>
                        )}
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Pagination */}
      {pagination && pagination.totalPages > 1 && (
        <div className="flex items-center justify-center gap-2 mt-8 pt-6 border-t border-slate-700">
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}
            disabled={!pagination.hasPrev}
            className="border-slate-600 text-slate-300"
          >
            Previous
          </Button>
          
          <span className="text-sm text-slate-400 px-4">
            Page {pagination.page} of {pagination.totalPages}
          </span>
          
          <Button
            variant="outline"
            size="sm"
            onClick={() => setCurrentPage(prev => prev + 1)}
            disabled={!pagination.hasNext}
            className="border-slate-600 text-slate-300"
          >
            Next
          </Button>
        </div>
      )}
    </div>
  );
}